TebLocalPlannerROS:

 odom_topic: /Odometry
 map_frame: map
 
 # Trajectory
  
 teb_autosize: True
 dt_ref: 0.3 #期望的轨迹时间分辨率
 dt_hysteresis: 0.03 #根据当前时间分辨率自动调整大小的滞后现象，通常约为。建议使用dt ref的10%
 max_samples: 500  #最大样本数量；警告：如果太小，离散化/分辨率可能不足以用于给定的机器人模型，或者避障不再有效。
 global_plan_overwrite_orientation: True #覆盖由全局规划器提供的局部子目标的方向
 allow_init_with_backwards_motion: True #如果为真，基础轨迹可能会以后退运动初始化，以防目标在本地代价地图中位于起点之后（仅当机器人配备后部传感器时推荐）
 max_global_plan_lookahead_dist: 2.0 # default 1.0 指定考虑优化的全局计划子集的最大长度 确定了距离机器人当前位置多远的全局计划会被视为有效。
 global_plan_viapoint_sep: 0.3 #default: -0.1  较大的通过点间隔可能会导致路径规划器生成的路径更加平滑 但会影响路径的精确度。
 global_plan_prune_distance: 1
 exact_arc_length: False
 feasibility_check_no_poses: 2 #每个采样间隔的姿态可行性分析数，default：4
 publish_feedback: False  #（应仅出于评估或调试目的启用）

 # Robot
 
 max_vel_x: 3.0 #4.0
 max_vel_x_backwards: 3.0
 max_vel_y: 3.0
 max_vel_theta: 7.0 #
 acc_lim_y: 5.0
 acc_lim_x: 4.5 #120 #4.5
 acc_lim_theta: 5 #65 #3.5
 holonomic_robot: True

 # ********************** Carlike robot parameters ********************
 #           此部分参数仅适用于类似汽车的机器人（如差速驱动机器人）
 # ********************************************************************
 min_turning_radius: 0.0        # Min turning radius of the carlike robot (compute value using a model or adjust with rqt_reconfigure manually)
 wheelbase: 0.0                 # Wheelbase of our robot
 cmd_angle_instead_rotvel: False # stage simulator takes the angle instead of the rotvel as input (twist message)
 # ********************************************************************

 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "circular"
   radius: 0.25 # for type "circular"
   line_start: [-0.1, 0.0] # for type "line" 线模型起始坐标
   line_end: [0.1, 0.0] # for type "line" 线模型尾部坐标
   front_offset: 0.2 # for type "two_circles" 前圆心坐标
   front_radius: 0.3 # for type "two_circles" 前圆半径
   rear_offset: 0.2 # for type "two_circles" 后圆心坐标
   rear_radius: 0.2 # for type "two_circles" 后圆半径
   vertices: [ [-0.2,-0.2], [0.2,-0.2], [0.2,0.2], [-0.2,0.2] ] # for type "polygon" 多边形边界点

 # GoalTolerance

 xy_goal_tolerance: 0.3
 yaw_goal_tolerance: 0.5
 free_goal_vel: False
 complete_global_plan: True
    
 # Obstacles
    
 min_obstacle_dist: 0.4 # 与障碍的最小期望距离,注意，teb_local_planner本身不考虑膨胀半径
 inflation_dist: 0.6 # 障碍物周围缓冲区(应大于min_obstacle_dist才能生效)
 include_costmap_obstacles: True #应否考虑到局部costmap的障碍
 include_dynamic_obstacles: True 
 costmap_obstacles_behind_robot_dist: 1.0 #考虑后面n米内的障碍物 限制规划时考虑的占据局部代价地图障碍物 (指定距离，米)。该值仅对机器人后方的障碍物生效。
 obstacle_poses_affected: 20 #为了保持距离，每个障碍物位置都与轨道上最近的位置相连

 dynamic_obstacle_inflation_dist: 0.6 #具有非零惩罚成本的动态障碍物预测位置周围的缓冲区（应大于min_obstacle_dist才能生效)


 costmap_converter_plugin: "" #定义插件名称，用于将costmap的单元格转换成点/线/多边形。若设置为空字符，则视为禁用转换，将所有点视为点障碍
 costmap_converter_spin_thread: True #如果为true，则costmap转换器将以不同的线程调用其回调队列, default:true
 costmap_converter_rate: 8 #定义costmap_converter插件处理当前costmap的频率（该值不高于costmap更新率

 # Optimization
    
 no_inner_iterations: 5 #在每个外循环迭代中调用的实际求解器迭代次数
 no_outer_iterations: 4 #在每个外循环迭代中调用的实际求解器迭代次数
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.1 #为硬约束近似的惩罚函数添加一个小的安全范围
 obstacle_cost_exponent: 4
 #***********调整:增大速度和角速度的优化权重会使得路径规划更加注重速度和角速度的控制，会导致运动更平滑稳定,减少急剧加速或减速的情况。
 weight_max_vel_y: 10.0 #横移关键参数
 weight_max_vel_x: 10.0 #满足最大允许平移速度的优化权重
 weight_max_vel_theta: 760.0 #满足最大允许角速度的优化权重
 weight_acc_lim_x: 1 #满足最大允许平移加速度的优化权重
 weight_acc_lim_y: 1
 weight_acc_lim_theta: 950 #满足最大允许角加速度的优化权重

 weight_kinematics_nh: 1 #满足非全向运动学约束的权重 （仅用于差分驱动机器人)
 weight_kinematics_forward_drive: 1 #强制机器人仅选择正向(仅用于差分驱动机器人)
 weight_kinematics_turning_radius: 1 #采用最小转向半径的优化权重（小车型机器人）
 weight_optimaltime: 100 # 优化轨迹并尽量缩短运动时间的权重，确保在规定的时间内到达目标
 weight_shortest_path: 0  # 倾向于选择更短的路径，路径可能更加弯曲或不平坦

 weight_obstacle: 100 #保持与障碍物的最小距离的优化权重 default: 50.0
 weight_inflation: 0.2 #优化轨迹并尽量避免膨胀区域的权重 (权重应设置较小)
 weight_dynamic_obstacle: 20 # 与动态障碍物保持最小距离的权重
 weight_dynamic_obstacle_inflation: 0.2 #优化轨迹并尽量避免动态障碍物膨胀区域的权重 (权重应设置较小)
 weight_viapoint: 80 #用于控制路径规划器在考虑经过点（via-points）时的权重。
 weight_adapt_factor: 2 #迭代地增加某些权重
 #*******************************************************************************8
 # Homotopy Class Planner
########################不用修改
 enable_homotopy_class_planning: False #激活并行规划，因为一次优化多个轨迹，占用更多的CPU资源
 enable_multithreading: True #激活多个线程，以便在不同的线程中规划每个轨迹
 max_number_classes: 3 #考虑到的不同轨迹的最大数量
 selection_cost_hysteresis: 1.0 #轨迹成本
 selection_prefer_initial_plan: 0.95
 selection_obst_cost_scale: 1.0 #障碍物成本
 selection_alternative_time_cost: False #如果为真，时间成本(时间差平方和)被总转移时间(时间差和)所替代

 roadmap_graph_no_samples: 15 #指定为创建路线图而生成的样本数
 roadmap_graph_area_width: 5 #指定该区域的宽度
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.5 #（0.2 < value <= 1）缩放用于区分同伦类的内部参数（H-signature）
 #警告：只能减少此参数，如果在局部costmap中遇到太多障碍物的情况，请勿选择极低值，否则无法将障碍物彼此区分开线缩放用于区分同伦类的内部参数（H-signature）
 h_signature_threshold: 0.1 #如果实部和复部的差都低于规定的阈值，则假定两个h签名相等
 obstacle_heading_threshold: 0.45 #指定障碍标头和目标标头之间的标量积的值，以便将(障碍)考虑到勘探中
 switching_blocking_period: 0.0
 viapoints_all_candidates: True #如果为真，则不同拓扑的所有轨迹都附加到这组vio -points上，否则只有共享与初始/全局计划相同拓扑的轨迹与它们连接
 delete_detours_backwards: True
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: False #可视化创建的图形，用于探索不同的轨迹（在rviz中检查标记消息）
 visualize_with_time_as_z_axis_scale: False

# Recovery
 ################不用修改
 shrink_horizon_backup: True
 shrink_horizon_min_duration: 10
 oscillation_recovery: True
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10